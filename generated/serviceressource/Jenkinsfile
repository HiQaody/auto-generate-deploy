pipeline {
    agent any
    environment {
        REGISTRY         = 'harbor.tsirylab.com'
        HARBOR_PROJECT   = 'pnud-agvm'
        IMAGE_NAME       = 'serviceressource'
        IMAGE_TAG        = "\${BUILD_NUMBER}"
        FULL_IMAGE_NAME  = "\${REGISTRY}/\${HARBOR_PROJECT}/\${IMAGE_NAME}:\${IMAGE_TAG}"
        NAMESPACE        = 'pnud-agvm'
        K8S_DIR          = 'k8s'
        DEPLOYMENT_NAME  = 'serviceressource'
        SERVICE_NAME     = 'serviceressource-service'
        HPA_NAME         = 'serviceressource-hpa'
        SECRET_NAME      = 'serviceressource-secret'
        PORT             = '3000'
        NODE_PORT        = '30130'
        DB_HOST = ''

    }
    stages {
        stage('Build & Push') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'harbor-credentials',
                                     usernameVariable: 'HARBOR_USER',
                                     passwordVariable: 'HARBOR_PASS'),
                    string(credentialsId: 'POSTGRES_HOST_ID', variable: 'DB_HOST'),
                ]) {
                    sh '''
                        set -e
                        docker logout \${REGISTRY} || true
                        docker build \
                          --build-arg DB_HOST="\${DB_HOST}" \
                          --build-arg PORT=3000 \
                          -t \${FULL_IMAGE_NAME} .
                        echo \${HARBOR_PASS} | \
                          docker login -u \${HARBOR_USER} --password-stdin \${REGISTRY}
                        docker push \${FULL_IMAGE_NAME}
                        docker logout \${REGISTRY}
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-jenkins', variable: 'KUBECONFIG'),
                    usernamePassword(credentialsId: 'harbor-credentials',
                                     usernameVariable: 'HARBOR_USER',
                                     passwordVariable: 'HARBOR_PASS'),
                    string(credentialsId: 'POSTGRES_HOST_ID', variable: 'DB_HOST'),
                ]) {
                    sh '''
                        set -e
                        export KUBECONFIG=\${KUBECONFIG}

                        kubectl create namespace \${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        kubectl delete secret harbor-registry-secret -n \${NAMESPACE} --ignore-not-found
                        kubectl create secret docker-registry harbor-registry-secret \
                          --docker-server=\${REGISTRY} \
                          --docker-username="\${HARBOR_USER}" \
                          --docker-password="\${HARBOR_PASS}" \
                          --namespace=\${NAMESPACE}

                        kubectl delete secret \${SECRET_NAME} -n \${NAMESPACE} --ignore-not-found
                        kubectl create secret generic \${SECRET_NAME} \
                          --from-literal=DB_HOST="\${DB_HOST}" \
                          --namespace=\${NAMESPACE}

                        for res in deployment service hpa; do
                            envsubst < \${K8S_DIR}/serviceressource-${res}.yaml > /tmp/serviceressource-${res}.yaml
                            kubectl apply -f /tmp/serviceressource-${res}.yaml
                        done

                        kubectl rollout status deployment/serviceressource -n \${NAMESPACE} --timeout=120s
                        kubectl get pods -n \${NAMESPACE} -l app=serviceressource
                    '''
                }}
            }}
        }
    post {{ always {{ cleanWs() }} }}
